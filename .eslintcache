[{"/home/xavier577/Desktop/React-project/covid-tracker/src/index.js":"1","/home/xavier577/Desktop/React-project/covid-tracker/src/App.js":"2","/home/xavier577/Desktop/React-project/covid-tracker/src/util.jsx":"3","/home/xavier577/Desktop/React-project/covid-tracker/src/component/InfoBox/InfoBox.jsx":"4","/home/xavier577/Desktop/React-project/covid-tracker/src/component/Map/Map.jsx":"5","/home/xavier577/Desktop/React-project/covid-tracker/src/component/LineGraph/lineGraph.jsx":"6","/home/xavier577/Desktop/React-project/covid-tracker/src/component/Table/table.jsx":"7"},{"size":222,"mtime":1609856656024,"results":"8","hashOfConfig":"9"},{"size":5103,"mtime":1609856796362,"results":"10","hashOfConfig":"9"},{"size":2028,"mtime":1609856732583,"results":"11","hashOfConfig":"9"},{"size":841,"mtime":1609856926026,"results":"12","hashOfConfig":"9"},{"size":579,"mtime":1609856868915,"results":"13","hashOfConfig":"9"},{"size":3381,"mtime":1609856908347,"results":"14","hashOfConfig":"9"},{"size":506,"mtime":1609856816346,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ekkb43",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/xavier577/Desktop/React-project/covid-tracker/src/index.js",[],["34","35"],"/home/xavier577/Desktop/React-project/covid-tracker/src/App.js",["36","37"],"import React, { Component } from 'react';\nimport './App.css'\nimport InfoBox from './component/InfoBox/InfoBox';\nimport numeral from 'numeral';\nimport { format } from 'numeral';\nimport Map from './component/Map/Map';\nimport LineGraph from './component/LineGraph/lineGraph'\nimport Table from './component/Table/table'\nimport { prettyShowStat, sortData } from './util'\nimport \"leaflet/dist/leaflet.css\";\n\nimport {\n  Card,\n  CardContent,\n  Typography,\n  FormControl,\n  Select,\n  MenuItem\n\n} from '@material-ui/core';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      countries: [],\n      country: 'worldwide',\n      casesType: 'cases',\n      countryInfo: {},\n      tableData: [],\n      mapCenter: { lat: 34.80746, lng: -40.4796 },\n      mapZoom: 3,\n      mapCountries: []\n    }\n  }\n  componentDidMount() {\n    const allInfo = async () => {\n      fetch('https://disease.sh/v3/covid-19/all')\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n            countryInfo: data\n          })\n        })\n    }\n    allInfo();\n\n    const getCountriesData = async () => {\n      try {\n        const fetchData = await fetch('https://disease.sh/v3/covid-19/countries')\n        const data = await fetchData.json()\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }))\n        let sortedData = sortData(data)\n        this.setState({\n          countries: countries,\n          tableData: sortedData,\n          mapCountries: data\n        })\n        console.log(data)\n      } catch (err) {\n        console.log(err.message)\n      }\n    }\n\n    getCountriesData()\n  }\n\n  onCountryChange = (e) => {\n    const countryCode = e.target.value\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          mapCenter: [data.countryInfo.lat, data.countryInfo.long],\n          mapZoom: 4,\n          country: countryCode,\n          countryInfo: data,\n\n\n\n\n        })\n      })\n\n  }\n  render() {\n    return (\n      <div className='app'>\n        <div className='app-left'>\n          <div className='app-header'>\n            <h1> COVID-19 Tracker</h1>\n            <FormControl className='app-dropdowm'>\n              <Select\n                variant='outlined'\n                value={this.state.country}\n                onChange={this.onCountryChange}\n              >\n                <MenuItem value='worldwide'>Worldwide</MenuItem>\n                {\n                  this.state.countries.map((country) => (\n                    <MenuItem key={country.name} value={country.value}>\n                      {country.name}\n                    </MenuItem>\n                  ))\n                }\n\n                {/* <MenuItem value = 'Nigeria'>Nigeria</MenuItem>\n                <MenuItem value = 'China'>China</MenuItem> */}\n              </Select>\n            </FormControl>\n          </div>\n\n          <div className=\"app-stats\">\n            <InfoBox\n              onClick={(e) => {\n                this.setState({\n                  casesType: \"cases\"\n                })\n              }}\n              title=\"Coronavirus Cases\"\n              cases={prettyShowStat(this.state.countryInfo.todayCases)}\n              total={numeral(this.state.countryInfo.cases).format(\"0.0a\")}\n              active={this.state.casesType === \"cases\"}\n              isRed\n            />\n            <InfoBox\n              onClick={(e) => {\n                this.setState({\n                  casesType: \"recovered\"\n                })\n              }}\n              title=\"Recovered\"\n              active={this.state.casesType === \"recovered\"}\n              cases={prettyShowStat(this.state.countryInfo.todayRecovered)}\n              total={numeral(this.state.countryInfo.recovered).format(\"0.0a\")}\n\n\n            />\n            <InfoBox\n              onClick={(e) => {\n                this.setState({\n                  casesType: \"deaths\"\n                })\n              }}\n              title=\"Death\"\n              isRed\n              active={this.state.casesType === \"deaths\"}\n              cases={prettyShowStat(this.state.countryInfo.todayDeaths)}\n              total={numeral(this.state.countryInfo.deaths).format(\"0.0a\")}\n            />\n          </div>\n          <Map\n            countries={this.state.mapCountries}\n            casesType={this.state.casesType}\n            center={this.state.mapCenter}\n            zoom={this.state.mapZoom}\n          />\n        </div>\n\n        <Card className='app-right'>\n          <CardContent>\n            <div className='app-information'>\n              <h3>Live Cases by Country</h3>\n              <Table countries={this.state.tableData} />\n              <h3>Worldwide new {this.state.casesType}</h3>\n              <LineGraph casesType={this.state.casesType} />\n            </div>\n          </CardContent>\n\n        </Card>\n\n      </div>\n    )\n  }\n}\n",["38","39"],"/home/xavier577/Desktop/React-project/covid-tracker/src/util.jsx",[],"/home/xavier577/Desktop/React-project/covid-tracker/src/component/InfoBox/InfoBox.jsx",[],"/home/xavier577/Desktop/React-project/covid-tracker/src/component/Map/Map.jsx",[],"/home/xavier577/Desktop/React-project/covid-tracker/src/component/LineGraph/lineGraph.jsx",["40"],"import { options } from 'numeral';\nimport React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral'\n\n//data is from  https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\nclass LineGraph extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            data: {}\n        }\n    }\n    buildChartData = (data,casesType) => {\n        let chartData = [];\n        let lastDataPoint;\n        for(let date in data.cases) {\n            if(lastDataPoint) {\n                let newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                    chartData.push(newDataPoint);\n            }\n            lastDataPoint = data[casesType][date]\n        }\n        return chartData;\n    }\n\n    fetchData = async () => {\n        await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then(response => response.json())\n        .then(data => {\n            let chartData = this.buildChartData(data, this.props.casesType);\n            this.setState({\n                data: chartData\n            })\n        })\n    }\n    \n    componentDidUpdate() {\n        \n        \n        this.fetchData();\n    }\n    render() {\n        // The code below isfrom chartjs .... :)\n        const options = {\n\n            legend: {\n                display: false\n            },\n            elements: {\n                points: {\n                    radius: 0,\n                },\n            },\n            maintainAspectRatio: false,\n            tooltips: {\n                node: \"index\",\n                intersect: false,\n                callbacks: {\n                    label: function(tooltipItem, data) {\n                        return numeral(tooltipItem.value).format('+0.0');\n                    },\n                },\n            },\n            scales: {\n                xAxes: [\n                    {\n                        type: 'time',\n                        time: {\n                            format: 'MM/DD/YY',\n                            tooltipFormat: 'll',\n                        },\n                    },\n                ],\n                yAxes: [\n                    {\n                        gridLines: {\n                            display: false,\n                        },\n                        ticks: {\n                            callback: function(value, index, values) {\n\n                                return numeral(value).format('0a');\n                            },\n\n                            \n                        },\n                    },\n                ],\n\n            },\n        };\n        \n        const { data } = this.state;\n        return (\n            <div>\n                { data.length > 0 && (\n                    <Line\n                    data = {{ \n                        datasets: [\n                            {\n\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                            borderColor: '#CC1034',\n                            data: data,\n                            },\n\n                        ],\n                    }}\n                    options = {options}\n                    />\n                ) \n                }\n                {/* the code above is from chartjs .. :) */}\n            </div>\n        )\n    }\n} \n\n\n\nexport default LineGraph;","/home/xavier577/Desktop/React-project/covid-tracker/src/component/Table/table.jsx",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":5,"column":10,"nodeType":"47","messageId":"48","endLine":5,"endColumn":16},{"ruleId":"45","severity":1,"message":"49","line":15,"column":3,"nodeType":"47","messageId":"48","endLine":15,"endColumn":13},{"ruleId":"41","replacedBy":"50"},{"ruleId":"43","replacedBy":"51"},{"ruleId":"45","severity":1,"message":"52","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":17},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'format' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.",["53"],["54"],"'options' is defined but never used.","no-global-assign","no-unsafe-negation"]