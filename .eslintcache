[{"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/index.js":"1","/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/InfoBox/InfoBox.jsx":"2","/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/LineGraph/lineGraph.jsx":"3","/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/util.jsx":"4","/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/Map/Map.jsx":"5","/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/Table/table.jsx":"6","/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/App.js":"7"},{"size":222,"mtime":1609856656000,"results":"8","hashOfConfig":"9"},{"size":841,"mtime":1609856926000,"results":"10","hashOfConfig":"9"},{"size":3381,"mtime":1609856908000,"results":"11","hashOfConfig":"9"},{"size":1890,"mtime":1611888696000,"results":"12","hashOfConfig":"9"},{"size":579,"mtime":1609856868000,"results":"13","hashOfConfig":"9"},{"size":506,"mtime":1609856816000,"results":"14","hashOfConfig":"9"},{"size":5121,"mtime":1613836518597,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"skaqaz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/index.js",[],["32","33"],"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/InfoBox/InfoBox.jsx",[],"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/LineGraph/lineGraph.jsx",["34"],"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/util.jsx",[],"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/Map/Map.jsx",[],"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/component/Table/table.jsx",[],"/home/tsegen/Desktop/myProjects/React-Projects/covid-tracker/src/App.js",["35","36"],"import React, { Component } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./component/InfoBox/InfoBox\";\nimport numeral from \"numeral\";\nimport { format } from \"numeral\";\nimport Map from \"./component/Map/Map\";\nimport LineGraph from \"./component/LineGraph/lineGraph\";\nimport Table from \"./component/Table/table\";\nimport { prettyShowStat, sortData } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport {\n  Card,\n  CardContent,\n  Typography,\n  FormControl,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      countries: [],\n      country: \"worldwide\",\n      casesType: \"cases\",\n      countryInfo: {},\n      tableData: [],\n      mapCenter: { lat: 34.80746, lng: -40.4796 },\n      mapZoom: 3,\n      mapCountries: [],\n    };\n  }\n  componentDidMount() {\n    const allInfo = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => {\n          this.setState({\n            countryInfo: data,\n          });\n        });\n    };\n    allInfo();\n\n    const getCountriesData = async () => {\n      try {\n        const fetchData = await fetch(\n          \"https://disease.sh/v3/covid-19/countries\"\n        );\n        const data = await fetchData.json();\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n        let sortedData = sortData(data);\n        this.setState({\n          countries: countries,\n          tableData: sortedData,\n          mapCountries: data,\n        });\n        console.log(data);\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n\n    getCountriesData();\n  }\n\n  onCountryChange = (e) => {\n    const countryCode = e.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          mapCenter: [data.countryInfo.lat, data.countryInfo.long],\n          mapZoom: 4,\n          country: countryCode,\n          countryInfo: data,\n        });\n      });\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-left\">\n          <div className=\"app-header\">\n            <h1> COVID-19 Tracker</h1>\n            <FormControl className=\"app-dropdowm\">\n              <Select\n                variant=\"outlined\"\n                value={this.state.country}\n                onChange={this.onCountryChange}>\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {this.state.countries.map((country) => (\n                  <MenuItem key={country.name} value={country.value}>\n                    {country.name}\n                  </MenuItem>\n                ))}\n\n                {/* <MenuItem value = 'Nigeria'>Nigeria</MenuItem>\n                <MenuItem value = 'China'>China</MenuItem> */}\n              </Select>\n            </FormControl>\n          </div>\n\n          <div className=\"app-stats\">\n            <InfoBox\n              onClick={(e) => {\n                this.setState({\n                  casesType: \"cases\",\n                });\n              }}\n              title=\"Coronavirus Cases\"\n              cases={prettyShowStat(this.state.countryInfo.todayCases)}\n              total={numeral(this.state.countryInfo.cases).format(\"0.0a\")}\n              active={this.state.casesType === \"cases\"}\n              isRed\n            />\n            <InfoBox\n              onClick={(e) => {\n                this.setState({\n                  casesType: \"recovered\",\n                });\n              }}\n              title=\"Recovered\"\n              active={this.state.casesType === \"recovered\"}\n              cases={prettyShowStat(this.state.countryInfo.todayRecovered)}\n              total={numeral(this.state.countryInfo.recovered).format(\"0.0a\")}\n            />\n            <InfoBox\n              onClick={(e) => {\n                this.setState({\n                  casesType: \"deaths\",\n                });\n              }}\n              title=\"Death\"\n              isRed\n              active={this.state.casesType === \"deaths\"}\n              cases={prettyShowStat(this.state.countryInfo.todayDeaths)}\n              total={numeral(this.state.countryInfo.deaths).format(\"0.0a\")}\n            />\n          </div>\n          <Map\n            countries={this.state.mapCountries}\n            casesType={this.state.casesType}\n            center={this.state.mapCenter}\n            zoom={this.state.mapZoom}\n          />\n        </div>\n\n        <Card className=\"app-right\">\n          <CardContent>\n            <div className=\"app-information\">\n              <h3>Live Cases by Country</h3>\n              <Table countries={this.state.tableData} />\n              <h3>Worldwide new {this.state.casesType}</h3>\n              <LineGraph casesType={this.state.casesType} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":17},{"ruleId":"41","severity":1,"message":"45","line":5,"column":10,"nodeType":"43","messageId":"44","endLine":5,"endColumn":16},{"ruleId":"41","severity":1,"message":"46","line":15,"column":3,"nodeType":"43","messageId":"44","endLine":15,"endColumn":13},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'options' is defined but never used.","Identifier","unusedVar","'format' is defined but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation"]